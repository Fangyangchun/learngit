mkdir 文件夹名  新建文件夹
vi 文件名   创建文件   shift+分号+w+q
pwd 查看当前目录
ls  查看当前目录下面的所有文件
git init 把当前目录变成git可以管理的仓库，且当前目录多了一个.git的目录，这个目录是Git来跟踪管理版本库的，千万不要手动修改这个目录里面的文件，改乱了，就把git仓库给破坏了
git add 文件名 把文件添加到仓库
git commit -m'日志信息' 告诉git，把文件提交到仓库
git status 掌握仓库当前的状态
git diff 文件名 产看具体修改了什么内容
git diff HEAD -- 文件名   可以查看工作区和版本库里面最新版本的区别
git log 显示从最近到最远的提交日志  觉得显示的内容太多，可在后面加上 --pretty=oneline参数
git log --graph --pretty=oneline --abbrev-commit
git log --graph  可以看到分支合并图
git reflog 查看命令历史，以便确定要回退到那个版本
HEAD  在git中,HEAD表示当前版本,上一个版本就是HEAD^,上上个版本就是HEAD^^，版本数量比较多时,如100个版本,写成HEAD~100
git reset --hard HEAD^  回退到上一个版本
git reset --hard commit_id  可以回到未来或者以前的版本
cat 文件名  查看文件的内容

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令。  还原文件
git reset HEAD file  可以把暂存区的修改撤销掉（unstage），重新放回工作区，git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
rm 文件名     删除文件


git rm 文件名   从版本库上删除该文件
git commit -m '提交log'  这两步挨着使用


远程仓库：

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
		$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。


第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：


	点“Add Key”，你就应该看到已经添加的Key
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。




git remote add origin git@github.com:fangyangchun/learngit.git   在本地关联自己的远程库

git push -u origin master    把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

从现在起，只要本地作了提交，就可以通过命令：git push origin master   把本地master分支的最新修改推送至GitHub，现在，就拥有了真正的分布式版本库！


git config --global user.name "Your Name"
git config --global user.email "email@example.com"
因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。


分支管理：
创建与合并分支：git checkout -b 分支名     git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
			git branch 分支名     创建分支
			git checkout 分支名   切换分支
git branch    查看当前分支  git branch命令会列出所有分支，当前分支前面会标一个*号。
git merge 分支名    用于合并指定分支到当前分支

git branch -d 分支名    删除分支
git branch -D 分支名    强行删除分支，例如分支未合并，删除该分支就需要强行删除


git merge --no-ff -m "log信息" 合并分支名         合并要创建一个新的commit，所以加上-m参数，把commit描述写进去，合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

git stash   可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list  查看工作现场列表
恢复工作现场的两种方法： 
第一种： git stash apply  恢复工作现场，stash内容并不删除，需要用git stash drop来删除
第二种： git stash pop 恢复工作现场的同时把stash内容也删了


git remote: 查看远程库的信息
git remote -v  显示更加详细的信息，显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

git branch --set-upstream 分支名 origin/分支名    指定本地分支与远程origin/分支的链接

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。


创建标签：
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。


操作标签：

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。



使用gitHub
在GitHub上，可以任意Fork开源仓库；

自己拥有Fork后的仓库的读写权限；

可以推送pull request给官方仓库来贡献代码。




配置别名：

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.ck checkout
git config --global alias.cm commit
git config --global alias.br branch
git config --global alias.last 'log -1'

配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
每个仓库的Git配置文件都放在.git/config文件中  查看：cat .git/config 
配置的别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

而全局配置的别名，在当前用户的Git配置文件，放在用户主目录下的一个隐藏文件.gitconfig中



































